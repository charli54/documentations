# AFTER STARTING NEW TERMINAL
source /opt/ros/kinetic/setup.bash
roscore					

# ECLIPSE CONFIGURATION POUR ROS
	1. Install eclipse from download
	2. make the launcher
		sudo nano ~/.local/share/applications/eclipse.desktop

			Desktop Entry]                                                                              
			Type=Application                                                                              
			Name=Eclipse                                                                                  
			Comment=Eclipse Integrated Development Environment                                            
			Icon=/home/hellboy/eclipse/cpp-oxygen/eclipse/icon.xpm                                       
			Exec=bash -i -c /home/hellboy/eclipse/cpp-oxygen/eclipse/eclipse                              
			Terminal=false                                                                                
			Categories=Development                                                                        
			StartupWMClass=Eclipse

	3. rendre le launcher executable
		chmod +x ~/.local/share/applications/eclipse.desktop

	4. Create the .project necessaire pour eclipse
		cd ~/catkin_ws
		catkin_make --force-cmake -G"Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8 .

	5. Dans eclipse File >> import >> Existing projects into workspace

	6. Seletionner ~/catkin_ws/build

	7. Pour compiler Ctrl + b

# ROS Terminlogy
	Nodes		: executable qui utilise ROS pour communiquer avec d'autres executables
	Message		: Type de donné utilisé par ROS pour publier ou souscrire a un topic
	Topic		: Sujet apropos duquel un "Node" peut souscrire ou publier des messages. Les exec communiquent a travers des topics
	Service		: Permet de communiquer avec un "Node"

# 1 Nodes
	rosnode list							//Sort the list of all active node
	rosnode info [/node_name]					//Information about the node
	rosnode kill [/node_name]					//Arrete un node
	rosnode machine [machine_name]					//list node running on a particular machine

	rosrun [package_name] [node_name] {__name:=another_name}	//start a node 

# 2 Topics
	Exemple: TurtleSim_Teleop publie les touches enfoncées sur un topic et TurtleSim souscrit a ce topic pour connaitre les touches.
	Pour visualiser les liens on peut utliser RQT_GRAPH
	rosrun rqt_graph rqt_graph

	rostopic list -v	
	rostopic echo [topic]
	rostopic type [topic]
		rosmsg show [message_type]				//permet de voir le format du message
	rostopic pub							//publie des données a travers le topic
	rostopic pub [topic] [msg_type] [args]
	rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist (-r 1) -- '[0.0, y, z]' '[a, b, c]'
		-1 : publi un seuk message
		(-r 1) : rate of 1 Hz
		-- : aucun des arguments n'est une option (valeur negatives)
		x, y, z : linear velocity
		a, b, c : angular velocity

# 3 Services
	rosservice list
	rosservice type [service]
		rossrv show [service_type]
		rossrv type [service] | rossrv show		//POur connaitre le format du service
	rosservice call [service] [args]	

	Rosparam permet de manipuler des données
		rosparam list
		rosparam get [parameter]						//Permet d'obtenir la valeur et le type de donné
		rosparam dump [file_name.yaml] [namespace]		//Permet d'enregistrer les parametre dans un fichier
			rosparam dump fichier.yaml copy
			/copy/parameter
		rosparam load [file_name.yaml] [namespace]

# 4 DEBUGGING

	rqt_console permet d'afficher les sorties d'un "Node" "topic" etc...
	rqt_logger_level permet de choisir le niveau de debugging "INFO" "WARNING" ets...

		rosrun rqt_console rqt_console
		rosrun rqt_logger_level rqt_logger_level

# 5 ROSLAUNCH

	roslaunch permet d'executer des "node" définis dans un fichier

		roslaunch [package_name] [file_name.launch]

	###_EXEMPLE_FILE_###
	<launch>					<!--Launch file-->

		<group ns="turtlesim1">			<!--group avec un namespace pour identifier les topic (/turtlesim1/velocity) 
			<node pkg="turtlesim" name="sim" type="turtlesim_node"/>
		</group>

		<group ns="turtlesim2">
			<node pkg="turtlesim" name="sim" type="turtlesim_node"/>
		</group>

		<node pkg="turtlesim" name="mimic" type="mimic">
			<remap from="input" to="turtlesim1/turtle1"/>
			<remap from="output" to="turtlesim2/turtle1"/>
		</node>
		
	</launch>

# 6 EDITOR

	Il est possible de modifier un fichier avec ROSED

	rosed [package_name] [file_name]

	Pour modifier l'éditeur par defaut
		export EDITOR='subl'
		source ~/.bashrc

# 7 PLAY AND RECORD DATA (rosbag)
	
	Permet d'enregisrter les message publié sur un topic et de les rejouer

	#Creation d'un repertoire temporaire pour stocker les .bag
	mkdir temp_directory
	cd temp_directory

	#Enregistrement des donnes
	rosbag record -a 											//record all published topics
	rosbag record -O subset /topic_of_interst /another_topic	//record only the desired topic

	#Lecture des donnes
	rosbag info bag_file.bag									//info sur le .bag
	rosbag play bag_file.bag
	rosbag play -s 1 bag_file.bag 								//debute la lecture a partir de 1s
	rosbag play -r 2 bag_file.bag 								//play with another rate

# 8 DEBUG WITH ROSWTF

	#Pour debugger un package
	roscd package_name
	roswtf

# 9 RVIZ

	#Pour lancer rviz
	rosrun rviz rviz 	
	rosrun rviz rviz -d `rospack find turtle_tf`/rviz/turtle_rviz.rviz 		//pour ouvrir un fichier existant

	